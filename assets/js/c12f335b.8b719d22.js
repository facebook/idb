"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[560],{4638:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"faqs","title":"Frequently Asked Questions","description":"Why use gRPC?","source":"@site/docs/faqs.mdx","sourceDirName":".","slug":"/faqs","permalink":"/docs/faqs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"faqs","title":"Frequently Asked Questions"},"sidebar":"docs","previous":{"title":"Accessibility Automation","permalink":"/docs/accessibility"}}');var t=s(4848),o=s(8453);const r={id:"faqs",title:"Frequently Asked Questions"},c=void 0,d={},l=[{value:"Why use gRPC?",id:"why-use-grpc",level:2},{value:"Where did <code>fbsimctl</code> go?",id:"where-did-fbsimctl-go",level:2}];function a(e){const i={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"why-use-grpc",children:"Why use gRPC?"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"gRPC"})," has a number of benefits for this project:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Evolution of interfaces means that features can be added for particular calls added, without the need for numeric versioning."}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"gRPC"})," supports bidirectional streams. This is hugely beneficial for commands that produce incremental output of an indeterminate length. For example, this is heavily used in streaming video or logs from iOS."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"gRPC"})," provides flexibility in the implementation of the server/companion. This may allow us to migrate ",(0,t.jsx)(i.code,{children:"idb"}),"'s companion server to a Swift implementation away from a Objective-C++ one without affecting the client's implementation."]}),"\n"]}),"\n",(0,t.jsxs)(i.h2,{id:"where-did-fbsimctl-go",children:["Where did ",(0,t.jsx)(i.code,{children:"fbsimctl"})," go?"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"fbsimctl"})," has now been removed from the codebase. ",(0,t.jsx)(i.code,{children:"idb"})," is it's replacement. We learned a lot thought building ",(0,t.jsx)(i.code,{children:"fbsimctl"})," which has informed a lot of the design considerations for ",(0,t.jsx)(i.code,{children:"idb"}),'. For instance, it had a very provisional "RPC" mechanism via sending HTTP requests which was one of the design goals of ',(0,t.jsx)(i.code,{children:"idb"}),". All commands that ",(0,t.jsx)(i.code,{children:"fbsimctl"})," has implemented are now implemented by ",(0,t.jsx)(i.code,{children:"idb"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["The last working version of ",(0,t.jsx)(i.code,{children:"fbsimctl"})," is ",(0,t.jsxs)(i.a,{href:"https://github.com/facebook/idb/releases/tag/v1.1.0",children:["tagged as ",(0,t.jsx)(i.code,{children:"v1.1.0"})]}),", which you can build or fork from. It has been removed from the codebase in the interests of clarity."]})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,i,s)=>{s.d(i,{R:()=>r,x:()=>c});var n=s(6540);const t={},o=n.createContext(t);function r(e){const i=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(o.Provider,{value:i},e.children)}}}]);