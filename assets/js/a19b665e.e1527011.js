"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[38],{5375:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>a,frontMatter:()=>d,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"development","title":"Development","description":"Building & Running the idb cli","source":"@site/docs/development.mdx","sourceDirName":".","slug":"/development","permalink":"/docs/development","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"development","title":"Development"},"sidebar":"docs","previous":{"title":"Architecture","permalink":"/docs/architecture"},"next":{"title":"Commands","permalink":"/docs/commands"}}');var t=i(4848),c=i(8453);const d={id:"development",title:"Development"},r=void 0,s={},l=[{value:"Building &amp; Running the <code>idb</code> cli",id:"building--running-the-idb-cli",level:2},{value:"Building &amp; Running the <code>idb_companion</code>",id:"building--running-the-idb_companion",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"building--running-the-idb-cli",children:["Building & Running the ",(0,t.jsxs)(n.a,{href:"architecture#the-idb-cli",children:[(0,t.jsx)(n.code,{children:"idb"})," cli"]})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"idb"})," cli is python based and can simply be built using ",(0,t.jsx)(n.code,{children:"pip"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pip3 install .\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"building--running-the-idb_companion",children:["Building & Running the ",(0,t.jsx)(n.a,{href:"architecture#the-idb_companion",children:(0,t.jsx)(n.code,{children:"idb_companion"})})]}),"\n",(0,t.jsx)(n.p,{children:"This is a native macOS executable, built via Xcode."}),"\n",(0,t.jsxs)(n.p,{children:["Firstly, there are system level build dependencies that needed, these can be ",(0,t.jsx)(n.a,{href:"https://brew.sh",children:"installed via homebrew"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Tap for grpc\nbrew tap grpc/grpc\n# The grpc compiler is used to generate C++ bindings from the idb.proto definition\nbrew install grpc\n# cocoapods is needed to resolve dependencies for the Xcode project\nbrew install cocoapods\n# cocoapods is used to resolve the grpc runtime library for the companion\n# This must be run from the root of the idb repository to use the appropriate Podfile\npod install\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will open an Xcode project that you can build and run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"open idb_companion.xcworkspace\n"})}),"\n",(0,t.jsxs)(n.p,{children:["After opening the Xcode project you will need to add a ",(0,t.jsx)(n.code,{children:"--udid"})," argument for launch."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Get the UDID of either your device or simulator","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Window -> Devices and Simulators"}),"\n",(0,t.jsx)(n.li,{children:"Select the device or simulator you care about"}),"\n",(0,t.jsxs)(n.li,{children:["Copy the value in the ",(0,t.jsx)(n.code,{children:"Identifier"})," section of the header"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Project -> Scheme -> Edit Scheme (or ",(0,t.jsx)(n.code,{children:"cmd + <"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Run -> Arguments"}),"\n",(0,t.jsxs)(n.li,{children:["Click the ",(0,t.jsx)(n.code,{children:"+"})," under the ",(0,t.jsx)(n.code,{children:"Arguments Passed on Launch"})," section"]}),"\n",(0,t.jsxs)(n.li,{children:["Enter ",(0,t.jsx)(n.code,{children:"--udid <UDID copied above>"})]}),"\n",(0,t.jsxs)(n.li,{children:["Run the ",(0,t.jsx)(n.code,{children:"idb_companion"})," target on ",(0,t.jsx)(n.code,{children:"My Mac"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Once ",(0,t.jsx)(n.code,{children:"idb_companion"})," has launched, it will output the TCP port upon which the companion has bound to ",(0,t.jsx)(n.code,{children:"stdout"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{"grpc_port":10882}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["By default this port is ",(0,t.jsx)(n.code,{children:"10882"}),", it can be bound on a random port with ",(0,t.jsx)(n.code,{children:"--port 0"})," or a port of your choosing. You'll now be able to direct ",(0,t.jsx)(n.code,{children:"idb"})," commands against this companion with the ",(0,t.jsx)(n.code,{children:"IDB_COMPANION"})," environment variable passed to the cli:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$ IDB_COMPANION=localhost:10882 idb describe\n"})}),"\n",(0,t.jsx)(n.p,{children:"As long as you prefix this environment variable before all commands, you'll be able to run commands against the companion that you're currently debugging within Xcode."})]})}function a(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>r});var o=i(6540);const t={},c=o.createContext(t);function d(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);